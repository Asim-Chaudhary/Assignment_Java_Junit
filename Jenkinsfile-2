pipeline 
{
    agent any

    environment     
            {
                DOCKER_IMAGE = "asimchaudhary/assignment_java_junit"
                DOCKER_TAG = "latest"
            }

    tools {
            maven 'Maven_2'
            dockerTool 'Docker_1'
            //sonarQubeScanner 'sonar_1'
    }

    stages 
    {
        stage('Build') 
        {   
            agent {
                    docker {image 'maven:3.8.6-eclipse-temurin-17'}
                }
            steps 
                {
                    script{ 
                        git branch : 'main', url: 'https://github.com/Asim-Chaudhary/Assignment_Java_Junit.git'
                        //docker.image('openjdk:17-jdk').inside
                        sh 'mvn clean compile' 
                        }
                
                }

        }

        stage('Test') 
        {   
            //agent {
                    //docker {image 'maven:3.8.6-eclipse-temurin-11'}
                //}
            steps 
                {
                    script{ 
                        git branch : 'main', url: 'https://github.com/Asim-Chaudhary/Assignment_Java_Junit.git'
                        //docker.image('openjdk:17-jdk').inside
                        sh 'mvn test' 
                        }
                
                }

        }
        stage('Scan') {
                    
                                    agent {
                                                docker {
                                                            image 'maven:3.8.6-eclipse-temurin-8'
                                                            args '--network ci_network'
                                                        }
                                            }
                                        steps {
                                                    withSonarQubeEnv('sonar') {
                                                    sh 'mvn clean install org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar -Dsonar.host.url=http://sonar:9000'
                                                        }
                                                }
                            }

        stage('Deploy') 
        {
            steps 
                {
                echo 'Deploy App'
                } 

        }      

        stage('Check Docker') {
                                steps {
                                        sh 'docker --version'
                                    }
                            }
        stage ('Build Docker Image')
                                    {    
                                        steps {
                                                    script { sh 'docker build -t ${DOCKER_IMAGE} .' }
                                                }
                                    }
        stage ('Push to docker hub')
                                    {
                                        steps {    
                                                script {     docker.withRegistry('', 'DockerHub_Token') {
                                                                                         docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push() 
                                                                                                                }
                                                        }
                                                            
                                            }
                                    }
    }
    post 
    {
            always
            { emailext body: 'The Pipeline was successful.', subject: 'Pipeline Status', to: 'asim.chaudhary459@gmail.com' }
    }
}
